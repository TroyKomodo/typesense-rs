// Typesense API
//
// An open source search engine for building delightful search experiences.
//
// The version of the OpenAPI document: 27.0
//
// Generated by: https://openapi-generator.tech

use std::sync::Arc;

use async_trait::async_trait;
use reqwest;
use serde::{Deserialize, Serialize};

use super::{configuration, Error};
use crate::apis::ResponseContent;
use crate::models;

#[async_trait]
pub trait AnalyticsApi: Send + Sync {
	async fn create_analytics_event(
		&self,
		params: CreateAnalyticsEventParams,
	) -> Result<models::AnalyticsEventCreateResponse, Error<CreateAnalyticsEventError>>;
	async fn create_analytics_rule(
		&self,
		params: CreateAnalyticsRuleParams,
	) -> Result<models::AnalyticsRuleSchema, Error<CreateAnalyticsRuleError>>;
	async fn delete_analytics_rule(
		&self,
		params: DeleteAnalyticsRuleParams,
	) -> Result<models::AnalyticsRuleDeleteResponse, Error<DeleteAnalyticsRuleError>>;
	async fn retrieve_analytics_rule(
		&self,
		params: RetrieveAnalyticsRuleParams,
	) -> Result<models::AnalyticsRuleSchema, Error<RetrieveAnalyticsRuleError>>;
	async fn retrieve_analytics_rules(
		&self,
	) -> Result<models::AnalyticsRulesRetrieveSchema, Error<RetrieveAnalyticsRulesError>>;
	async fn upsert_analytics_rule(
		&self,
		params: UpsertAnalyticsRuleParams,
	) -> Result<models::AnalyticsRuleSchema, Error<UpsertAnalyticsRuleError>>;
}

pub struct AnalyticsApiClient {
	configuration: Arc<configuration::Configuration>,
}

impl AnalyticsApiClient {
	pub fn new(configuration: Arc<configuration::Configuration>) -> Self {
		Self { configuration }
	}
}

/// struct for passing parameters to the method [`create_analytics_event`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct CreateAnalyticsEventParams {
	/// The Analytics event to be created
	pub analytics_event_create_schema: models::AnalyticsEventCreateSchema,
}

/// struct for passing parameters to the method [`create_analytics_rule`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct CreateAnalyticsRuleParams {
	/// The Analytics rule to be created
	pub analytics_rule_schema: models::AnalyticsRuleSchema,
}

/// struct for passing parameters to the method [`delete_analytics_rule`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct DeleteAnalyticsRuleParams {
	/// The name of the analytics rule to delete
	pub rule_name: String,
}

/// struct for passing parameters to the method [`retrieve_analytics_rule`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct RetrieveAnalyticsRuleParams {
	/// The name of the analytics rule to retrieve
	pub rule_name: String,
}

/// struct for passing parameters to the method [`upsert_analytics_rule`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct UpsertAnalyticsRuleParams {
	/// The name of the analytics rule to upsert
	pub rule_name: String,
	/// The Analytics rule to be upserted
	pub analytics_rule_upsert_schema: models::AnalyticsRuleUpsertSchema,
}

#[async_trait]
impl AnalyticsApi for AnalyticsApiClient {
	/// Sending events for analytics e.g rank search results based on
	/// popularity.
	async fn create_analytics_event(
		&self,
		params: CreateAnalyticsEventParams,
	) -> Result<models::AnalyticsEventCreateResponse, Error<CreateAnalyticsEventError>> {
		let CreateAnalyticsEventParams {
			analytics_event_create_schema,
		} = params;

		let local_var_configuration = &self.configuration;

		let local_var_client = &local_var_configuration.client;

		let local_var_uri_str = format!("{}/analytics/events", local_var_configuration.base_path);
		let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

		if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
			local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
		}
		if let Some(ref local_var_apikey) = local_var_configuration.api_key {
			let local_var_key = local_var_apikey.key.clone();
			let local_var_value = match local_var_apikey.prefix {
				Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
				None => local_var_key,
			};
			local_var_req_builder = local_var_req_builder.header("X-TYPESENSE-API-KEY", local_var_value);
		};
		local_var_req_builder = local_var_req_builder.json(&analytics_event_create_schema);

		let local_var_req = local_var_req_builder.build()?;
		let local_var_resp = local_var_client.execute(local_var_req).await?;

		let local_var_status = local_var_resp.status();
		let local_var_content = local_var_resp.text().await?;

		if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
			serde_json::from_str(&local_var_content).map_err(Error::from)
		} else {
			let local_var_entity: Option<CreateAnalyticsEventError> = serde_json::from_str(&local_var_content).ok();
			let local_var_error = ResponseContent {
				status: local_var_status,
				content: local_var_content,
				entity: local_var_entity,
			};
			Err(Error::ResponseError(local_var_error))
		}
	}

	/// When an analytics rule is created, we give it a name and describe the
	/// type, the source collections and the destination collection.
	async fn create_analytics_rule(
		&self,
		params: CreateAnalyticsRuleParams,
	) -> Result<models::AnalyticsRuleSchema, Error<CreateAnalyticsRuleError>> {
		let CreateAnalyticsRuleParams { analytics_rule_schema } = params;

		let local_var_configuration = &self.configuration;

		let local_var_client = &local_var_configuration.client;

		let local_var_uri_str = format!("{}/analytics/rules", local_var_configuration.base_path);
		let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

		if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
			local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
		}
		if let Some(ref local_var_apikey) = local_var_configuration.api_key {
			let local_var_key = local_var_apikey.key.clone();
			let local_var_value = match local_var_apikey.prefix {
				Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
				None => local_var_key,
			};
			local_var_req_builder = local_var_req_builder.header("X-TYPESENSE-API-KEY", local_var_value);
		};
		local_var_req_builder = local_var_req_builder.json(&analytics_rule_schema);

		let local_var_req = local_var_req_builder.build()?;
		let local_var_resp = local_var_client.execute(local_var_req).await?;

		let local_var_status = local_var_resp.status();
		let local_var_content = local_var_resp.text().await?;

		if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
			serde_json::from_str(&local_var_content).map_err(Error::from)
		} else {
			let local_var_entity: Option<CreateAnalyticsRuleError> = serde_json::from_str(&local_var_content).ok();
			let local_var_error = ResponseContent {
				status: local_var_status,
				content: local_var_content,
				entity: local_var_entity,
			};
			Err(Error::ResponseError(local_var_error))
		}
	}

	/// Permanently deletes an analytics rule, given it's name
	async fn delete_analytics_rule(
		&self,
		params: DeleteAnalyticsRuleParams,
	) -> Result<models::AnalyticsRuleDeleteResponse, Error<DeleteAnalyticsRuleError>> {
		let DeleteAnalyticsRuleParams { rule_name } = params;

		let local_var_configuration = &self.configuration;

		let local_var_client = &local_var_configuration.client;

		let local_var_uri_str = format!(
			"{}/analytics/rules/{ruleName}",
			local_var_configuration.base_path,
			ruleName = crate::apis::urlencode(rule_name)
		);
		let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

		if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
			local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
		}
		if let Some(ref local_var_apikey) = local_var_configuration.api_key {
			let local_var_key = local_var_apikey.key.clone();
			let local_var_value = match local_var_apikey.prefix {
				Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
				None => local_var_key,
			};
			local_var_req_builder = local_var_req_builder.header("X-TYPESENSE-API-KEY", local_var_value);
		};

		let local_var_req = local_var_req_builder.build()?;
		let local_var_resp = local_var_client.execute(local_var_req).await?;

		let local_var_status = local_var_resp.status();
		let local_var_content = local_var_resp.text().await?;

		if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
			serde_json::from_str(&local_var_content).map_err(Error::from)
		} else {
			let local_var_entity: Option<DeleteAnalyticsRuleError> = serde_json::from_str(&local_var_content).ok();
			let local_var_error = ResponseContent {
				status: local_var_status,
				content: local_var_content,
				entity: local_var_entity,
			};
			Err(Error::ResponseError(local_var_error))
		}
	}

	/// Retrieve the details of an analytics rule, given it's name
	async fn retrieve_analytics_rule(
		&self,
		params: RetrieveAnalyticsRuleParams,
	) -> Result<models::AnalyticsRuleSchema, Error<RetrieveAnalyticsRuleError>> {
		let RetrieveAnalyticsRuleParams { rule_name } = params;

		let local_var_configuration = &self.configuration;

		let local_var_client = &local_var_configuration.client;

		let local_var_uri_str = format!(
			"{}/analytics/rules/{ruleName}",
			local_var_configuration.base_path,
			ruleName = crate::apis::urlencode(rule_name)
		);
		let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

		if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
			local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
		}
		if let Some(ref local_var_apikey) = local_var_configuration.api_key {
			let local_var_key = local_var_apikey.key.clone();
			let local_var_value = match local_var_apikey.prefix {
				Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
				None => local_var_key,
			};
			local_var_req_builder = local_var_req_builder.header("X-TYPESENSE-API-KEY", local_var_value);
		};

		let local_var_req = local_var_req_builder.build()?;
		let local_var_resp = local_var_client.execute(local_var_req).await?;

		let local_var_status = local_var_resp.status();
		let local_var_content = local_var_resp.text().await?;

		if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
			serde_json::from_str(&local_var_content).map_err(Error::from)
		} else {
			let local_var_entity: Option<RetrieveAnalyticsRuleError> = serde_json::from_str(&local_var_content).ok();
			let local_var_error = ResponseContent {
				status: local_var_status,
				content: local_var_content,
				entity: local_var_entity,
			};
			Err(Error::ResponseError(local_var_error))
		}
	}

	/// Retrieve the details of all analytics rules
	async fn retrieve_analytics_rules(
		&self,
	) -> Result<models::AnalyticsRulesRetrieveSchema, Error<RetrieveAnalyticsRulesError>> {
		let local_var_configuration = &self.configuration;

		let local_var_client = &local_var_configuration.client;

		let local_var_uri_str = format!("{}/analytics/rules", local_var_configuration.base_path);
		let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

		if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
			local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
		}
		if let Some(ref local_var_apikey) = local_var_configuration.api_key {
			let local_var_key = local_var_apikey.key.clone();
			let local_var_value = match local_var_apikey.prefix {
				Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
				None => local_var_key,
			};
			local_var_req_builder = local_var_req_builder.header("X-TYPESENSE-API-KEY", local_var_value);
		};

		let local_var_req = local_var_req_builder.build()?;
		let local_var_resp = local_var_client.execute(local_var_req).await?;

		let local_var_status = local_var_resp.status();
		let local_var_content = local_var_resp.text().await?;

		if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
			serde_json::from_str(&local_var_content).map_err(Error::from)
		} else {
			let local_var_entity: Option<RetrieveAnalyticsRulesError> = serde_json::from_str(&local_var_content).ok();
			let local_var_error = ResponseContent {
				status: local_var_status,
				content: local_var_content,
				entity: local_var_entity,
			};
			Err(Error::ResponseError(local_var_error))
		}
	}

	/// Upserts an analytics rule with the given name.
	async fn upsert_analytics_rule(
		&self,
		params: UpsertAnalyticsRuleParams,
	) -> Result<models::AnalyticsRuleSchema, Error<UpsertAnalyticsRuleError>> {
		let UpsertAnalyticsRuleParams {
			rule_name,
			analytics_rule_upsert_schema,
		} = params;

		let local_var_configuration = &self.configuration;

		let local_var_client = &local_var_configuration.client;

		let local_var_uri_str = format!(
			"{}/analytics/rules/{ruleName}",
			local_var_configuration.base_path,
			ruleName = crate::apis::urlencode(rule_name)
		);
		let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

		if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
			local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
		}
		if let Some(ref local_var_apikey) = local_var_configuration.api_key {
			let local_var_key = local_var_apikey.key.clone();
			let local_var_value = match local_var_apikey.prefix {
				Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
				None => local_var_key,
			};
			local_var_req_builder = local_var_req_builder.header("X-TYPESENSE-API-KEY", local_var_value);
		};
		local_var_req_builder = local_var_req_builder.json(&analytics_rule_upsert_schema);

		let local_var_req = local_var_req_builder.build()?;
		let local_var_resp = local_var_client.execute(local_var_req).await?;

		let local_var_status = local_var_resp.status();
		let local_var_content = local_var_resp.text().await?;

		if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
			serde_json::from_str(&local_var_content).map_err(Error::from)
		} else {
			let local_var_entity: Option<UpsertAnalyticsRuleError> = serde_json::from_str(&local_var_content).ok();
			let local_var_error = ResponseContent {
				status: local_var_status,
				content: local_var_content,
				entity: local_var_entity,
			};
			Err(Error::ResponseError(local_var_error))
		}
	}
}

/// struct for typed errors of method [`create_analytics_event`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateAnalyticsEventError {
	Status400(models::ApiResponse),
	UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`create_analytics_rule`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateAnalyticsRuleError {
	Status400(models::ApiResponse),
	UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`delete_analytics_rule`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteAnalyticsRuleError {
	Status404(models::ApiResponse),
	UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`retrieve_analytics_rule`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum RetrieveAnalyticsRuleError {
	Status404(models::ApiResponse),
	UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`retrieve_analytics_rules`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum RetrieveAnalyticsRulesError {
	UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`upsert_analytics_rule`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpsertAnalyticsRuleError {
	Status400(models::ApiResponse),
	UnknownValue(serde_json::Value),
}
