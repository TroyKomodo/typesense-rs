// Typesense API
//
// An open source search engine for building delightful search experiences.
//
// The version of the OpenAPI document: 27.0
//
// Generated by: https://openapi-generator.tech

use std::sync::Arc;

use async_trait::async_trait;
use reqwest;
use serde::{Deserialize, Serialize};

use super::{configuration, Error};
use crate::apis::ResponseContent;
use crate::models;

#[async_trait]
pub trait CurationApi: Send + Sync {
	async fn delete_search_override(
		&self,
		params: DeleteSearchOverrideParams,
	) -> Result<models::SearchOverride, Error<DeleteSearchOverrideError>>;
	async fn get_search_overrides(
		&self,
		params: GetSearchOverridesParams,
	) -> Result<models::SearchOverridesResponse, Error<GetSearchOverridesError>>;
	async fn upsert_search_override(
		&self,
		params: UpsertSearchOverrideParams,
	) -> Result<models::SearchOverride, Error<UpsertSearchOverrideError>>;
}

pub struct CurationApiClient {
	configuration: Arc<configuration::Configuration>,
}

impl CurationApiClient {
	pub fn new(configuration: Arc<configuration::Configuration>) -> Self {
		Self { configuration }
	}
}

/// struct for passing parameters to the method [`delete_search_override`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct DeleteSearchOverrideParams {
	/// The name of the collection
	pub collection_name: String,
	/// The ID of the search override to delete
	pub override_id: String,
}

/// struct for passing parameters to the method [`get_search_overrides`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct GetSearchOverridesParams {
	/// The name of the collection
	pub collection_name: String,
}

/// struct for passing parameters to the method [`upsert_search_override`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct UpsertSearchOverrideParams {
	/// The name of the collection
	pub collection_name: String,
	/// The ID of the search override to create/update
	pub override_id: String,
	/// The search override object to be created/updated
	pub search_override_schema: models::SearchOverrideSchema,
}

#[async_trait]
impl CurationApi for CurationApiClient {
	async fn delete_search_override(
		&self,
		params: DeleteSearchOverrideParams,
	) -> Result<models::SearchOverride, Error<DeleteSearchOverrideError>> {
		let DeleteSearchOverrideParams {
			collection_name,
			override_id,
		} = params;

		let local_var_configuration = &self.configuration;

		let local_var_client = &local_var_configuration.client;

		let local_var_uri_str = format!(
			"{}/collections/{collectionName}/overrides/{overrideId}",
			local_var_configuration.base_path,
			collectionName = crate::apis::urlencode(collection_name),
			overrideId = crate::apis::urlencode(override_id)
		);
		let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

		if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
			local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
		}
		if let Some(ref local_var_apikey) = local_var_configuration.api_key {
			let local_var_key = local_var_apikey.key.clone();
			let local_var_value = match local_var_apikey.prefix {
				Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
				None => local_var_key,
			};
			local_var_req_builder = local_var_req_builder.header("X-TYPESENSE-API-KEY", local_var_value);
		};

		let local_var_req = local_var_req_builder.build()?;
		let local_var_resp = local_var_client.execute(local_var_req).await?;

		let local_var_status = local_var_resp.status();
		let local_var_content = local_var_resp.text().await?;

		if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
			serde_json::from_str(&local_var_content).map_err(Error::from)
		} else {
			let local_var_entity: Option<DeleteSearchOverrideError> = serde_json::from_str(&local_var_content).ok();
			let local_var_error = ResponseContent {
				status: local_var_status,
				content: local_var_content,
				entity: local_var_entity,
			};
			Err(Error::ResponseError(local_var_error))
		}
	}

	async fn get_search_overrides(
		&self,
		params: GetSearchOverridesParams,
	) -> Result<models::SearchOverridesResponse, Error<GetSearchOverridesError>> {
		let GetSearchOverridesParams { collection_name } = params;

		let local_var_configuration = &self.configuration;

		let local_var_client = &local_var_configuration.client;

		let local_var_uri_str = format!(
			"{}/collections/{collectionName}/overrides",
			local_var_configuration.base_path,
			collectionName = crate::apis::urlencode(collection_name)
		);
		let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

		if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
			local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
		}
		if let Some(ref local_var_apikey) = local_var_configuration.api_key {
			let local_var_key = local_var_apikey.key.clone();
			let local_var_value = match local_var_apikey.prefix {
				Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
				None => local_var_key,
			};
			local_var_req_builder = local_var_req_builder.header("X-TYPESENSE-API-KEY", local_var_value);
		};

		let local_var_req = local_var_req_builder.build()?;
		let local_var_resp = local_var_client.execute(local_var_req).await?;

		let local_var_status = local_var_resp.status();
		let local_var_content = local_var_resp.text().await?;

		if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
			serde_json::from_str(&local_var_content).map_err(Error::from)
		} else {
			let local_var_entity: Option<GetSearchOverridesError> = serde_json::from_str(&local_var_content).ok();
			let local_var_error = ResponseContent {
				status: local_var_status,
				content: local_var_content,
				entity: local_var_entity,
			};
			Err(Error::ResponseError(local_var_error))
		}
	}

	/// Create or update an override to promote certain documents over others.
	/// Using overrides, you can include or exclude specific documents for a
	/// given query.
	async fn upsert_search_override(
		&self,
		params: UpsertSearchOverrideParams,
	) -> Result<models::SearchOverride, Error<UpsertSearchOverrideError>> {
		let UpsertSearchOverrideParams {
			collection_name,
			override_id,
			search_override_schema,
		} = params;

		let local_var_configuration = &self.configuration;

		let local_var_client = &local_var_configuration.client;

		let local_var_uri_str = format!(
			"{}/collections/{collectionName}/overrides/{overrideId}",
			local_var_configuration.base_path,
			collectionName = crate::apis::urlencode(collection_name),
			overrideId = crate::apis::urlencode(override_id)
		);
		let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

		if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
			local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
		}
		if let Some(ref local_var_apikey) = local_var_configuration.api_key {
			let local_var_key = local_var_apikey.key.clone();
			let local_var_value = match local_var_apikey.prefix {
				Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
				None => local_var_key,
			};
			local_var_req_builder = local_var_req_builder.header("X-TYPESENSE-API-KEY", local_var_value);
		};
		local_var_req_builder = local_var_req_builder.json(&search_override_schema);

		let local_var_req = local_var_req_builder.build()?;
		let local_var_resp = local_var_client.execute(local_var_req).await?;

		let local_var_status = local_var_resp.status();
		let local_var_content = local_var_resp.text().await?;

		if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
			serde_json::from_str(&local_var_content).map_err(Error::from)
		} else {
			let local_var_entity: Option<UpsertSearchOverrideError> = serde_json::from_str(&local_var_content).ok();
			let local_var_error = ResponseContent {
				status: local_var_status,
				content: local_var_content,
				entity: local_var_entity,
			};
			Err(Error::ResponseError(local_var_error))
		}
	}
}

/// struct for typed errors of method [`delete_search_override`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteSearchOverrideError {
	Status404(models::ApiResponse),
	UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_search_overrides`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetSearchOverridesError {
	UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`upsert_search_override`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpsertSearchOverrideError {
	Status404(models::ApiResponse),
	UnknownValue(serde_json::Value),
}
