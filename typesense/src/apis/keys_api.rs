// Typesense API
//
// An open source search engine for building delightful search experiences.
//
// The version of the OpenAPI document: 27.0
//
// Generated by: https://openapi-generator.tech

use std::sync::Arc;

use async_trait::async_trait;
use reqwest;
use serde::{Deserialize, Serialize};

use super::{configuration, Error};
use crate::apis::ResponseContent;
use crate::models;

#[async_trait]
pub trait KeysApi: Send + Sync {
	async fn create_key(&self, params: CreateKeyParams) -> Result<models::ApiKey, Error<CreateKeyError>>;
	async fn delete_key(&self, params: DeleteKeyParams) -> Result<models::ApiKey, Error<DeleteKeyError>>;
	async fn get_key(&self, params: GetKeyParams) -> Result<models::ApiKey, Error<GetKeyError>>;
	async fn get_keys(&self) -> Result<models::ApiKeysResponse, Error<GetKeysError>>;
}

pub struct KeysApiClient {
	configuration: Arc<configuration::Configuration>,
}

impl KeysApiClient {
	pub fn new(configuration: Arc<configuration::Configuration>) -> Self {
		Self { configuration }
	}
}

/// struct for passing parameters to the method [`create_key`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct CreateKeyParams {
	/// The object that describes API key scope
	pub api_key_schema: Option<models::ApiKeySchema>,
}

/// struct for passing parameters to the method [`delete_key`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct DeleteKeyParams {
	/// The ID of the key to delete
	pub key_id: i64,
}

/// struct for passing parameters to the method [`get_key`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct GetKeyParams {
	/// The ID of the key to retrieve
	pub key_id: i64,
}

#[async_trait]
impl KeysApi for KeysApiClient {
	/// Create an API Key with fine-grain access control. You can restrict
	/// access on both a per-collection and per-action level. The generated key
	/// is returned only during creation. You want to store this key carefully
	/// in a secure place.
	async fn create_key(&self, params: CreateKeyParams) -> Result<models::ApiKey, Error<CreateKeyError>> {
		let CreateKeyParams { api_key_schema } = params;

		let local_var_configuration = &self.configuration;

		let local_var_client = &local_var_configuration.client;

		let local_var_uri_str = format!("{}/keys", local_var_configuration.base_path);
		let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

		if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
			local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
		}
		if let Some(ref local_var_apikey) = local_var_configuration.api_key {
			let local_var_key = local_var_apikey.key.clone();
			let local_var_value = match local_var_apikey.prefix {
				Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
				None => local_var_key,
			};
			local_var_req_builder = local_var_req_builder.header("X-TYPESENSE-API-KEY", local_var_value);
		};
		local_var_req_builder = local_var_req_builder.json(&api_key_schema);

		let local_var_req = local_var_req_builder.build()?;
		let local_var_resp = local_var_client.execute(local_var_req).await?;

		let local_var_status = local_var_resp.status();
		let local_var_content = local_var_resp.text().await?;

		if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
			serde_json::from_str(&local_var_content).map_err(Error::from)
		} else {
			let local_var_entity: Option<CreateKeyError> = serde_json::from_str(&local_var_content).ok();
			let local_var_error = ResponseContent {
				status: local_var_status,
				content: local_var_content,
				entity: local_var_entity,
			};
			Err(Error::ResponseError(local_var_error))
		}
	}

	async fn delete_key(&self, params: DeleteKeyParams) -> Result<models::ApiKey, Error<DeleteKeyError>> {
		let DeleteKeyParams { key_id } = params;

		let local_var_configuration = &self.configuration;

		let local_var_client = &local_var_configuration.client;

		let local_var_uri_str = format!("{}/keys/{keyId}", local_var_configuration.base_path, keyId = key_id);
		let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

		if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
			local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
		}
		if let Some(ref local_var_apikey) = local_var_configuration.api_key {
			let local_var_key = local_var_apikey.key.clone();
			let local_var_value = match local_var_apikey.prefix {
				Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
				None => local_var_key,
			};
			local_var_req_builder = local_var_req_builder.header("X-TYPESENSE-API-KEY", local_var_value);
		};

		let local_var_req = local_var_req_builder.build()?;
		let local_var_resp = local_var_client.execute(local_var_req).await?;

		let local_var_status = local_var_resp.status();
		let local_var_content = local_var_resp.text().await?;

		if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
			serde_json::from_str(&local_var_content).map_err(Error::from)
		} else {
			let local_var_entity: Option<DeleteKeyError> = serde_json::from_str(&local_var_content).ok();
			let local_var_error = ResponseContent {
				status: local_var_status,
				content: local_var_content,
				entity: local_var_entity,
			};
			Err(Error::ResponseError(local_var_error))
		}
	}

	/// Retrieve (metadata about) a key. Only the key prefix is returned when
	/// you retrieve a key. Due to security reasons, only the create endpoint
	/// returns the full API key.
	async fn get_key(&self, params: GetKeyParams) -> Result<models::ApiKey, Error<GetKeyError>> {
		let GetKeyParams { key_id } = params;

		let local_var_configuration = &self.configuration;

		let local_var_client = &local_var_configuration.client;

		let local_var_uri_str = format!("{}/keys/{keyId}", local_var_configuration.base_path, keyId = key_id);
		let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

		if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
			local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
		}
		if let Some(ref local_var_apikey) = local_var_configuration.api_key {
			let local_var_key = local_var_apikey.key.clone();
			let local_var_value = match local_var_apikey.prefix {
				Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
				None => local_var_key,
			};
			local_var_req_builder = local_var_req_builder.header("X-TYPESENSE-API-KEY", local_var_value);
		};

		let local_var_req = local_var_req_builder.build()?;
		let local_var_resp = local_var_client.execute(local_var_req).await?;

		let local_var_status = local_var_resp.status();
		let local_var_content = local_var_resp.text().await?;

		if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
			serde_json::from_str(&local_var_content).map_err(Error::from)
		} else {
			let local_var_entity: Option<GetKeyError> = serde_json::from_str(&local_var_content).ok();
			let local_var_error = ResponseContent {
				status: local_var_status,
				content: local_var_content,
				entity: local_var_entity,
			};
			Err(Error::ResponseError(local_var_error))
		}
	}

	async fn get_keys(&self) -> Result<models::ApiKeysResponse, Error<GetKeysError>> {
		let local_var_configuration = &self.configuration;

		let local_var_client = &local_var_configuration.client;

		let local_var_uri_str = format!("{}/keys", local_var_configuration.base_path);
		let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

		if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
			local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
		}
		if let Some(ref local_var_apikey) = local_var_configuration.api_key {
			let local_var_key = local_var_apikey.key.clone();
			let local_var_value = match local_var_apikey.prefix {
				Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
				None => local_var_key,
			};
			local_var_req_builder = local_var_req_builder.header("X-TYPESENSE-API-KEY", local_var_value);
		};

		let local_var_req = local_var_req_builder.build()?;
		let local_var_resp = local_var_client.execute(local_var_req).await?;

		let local_var_status = local_var_resp.status();
		let local_var_content = local_var_resp.text().await?;

		if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
			serde_json::from_str(&local_var_content).map_err(Error::from)
		} else {
			let local_var_entity: Option<GetKeysError> = serde_json::from_str(&local_var_content).ok();
			let local_var_error = ResponseContent {
				status: local_var_status,
				content: local_var_content,
				entity: local_var_entity,
			};
			Err(Error::ResponseError(local_var_error))
		}
	}
}

/// struct for typed errors of method [`create_key`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateKeyError {
	Status400(models::ApiResponse),
	Status409(models::ApiResponse),
	UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`delete_key`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteKeyError {
	Status400(models::ApiResponse),
	Status404(models::ApiResponse),
	UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_key`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetKeyError {
	Status404(models::ApiResponse),
	UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_keys`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetKeysError {
	UnknownValue(serde_json::Value),
}
